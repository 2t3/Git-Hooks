#! /usr/bin/env perl

use warnings;
use strict;

################################################################################

sub exec_cmd {
    my $cmd = shift;
    chomp(my $res = `$cmd`);
    $res;
}

sub git_dir {
    chomp(my $dir = `git rev-parse --git-dir`);
    my $cmd = 'cd $(dirname "' . $dir . '"); pwd';
    my $parent = &exec_cmd('cd $(dirname "' . $dir . '"); pwd');
    my $name = &exec_cmd('basename "' . $dir . '"');
    "${parent}/$name";
}

sub list { &exec_cmd('cat "${GIT_HOOKS_HOME}/configs/hooks-list"'); }

sub enabled { &exec_cmd('ls -I dispatcher "' . &git_dir . '/hooks"'); }

################################################################################

my $count = @ARGV;

if ($count == 0) {
    # TODO : usage
    exit 0;
}

my $cmd = shift;
my @args = @ARGV;

################################################################################

if ($cmd eq 'list') {
    print &list, "\n";
}
elsif ($cmd eq 'enabled') {
    print &enabled, "\n";
}
elsif ($cmd eq 'disabled') {
    my @list = split(/\r\n|\r|\n/, &list);
    my @enabled = split(/\r\n|\r|\n/, &enabled);

    my %count = ();
    foreach (@list, @enabled) { $count{$_}++; }
    my @diff = ();
    foreach (keys %count) {
        if ($count{$_} != 2) {
            push @diff, $_;
        }
    }
    foreach (sort @diff) {
        print $_, "\n";
    }
}
elsif ($cmd eq 'on') {
}
elsif ($cmd eq 'off') {
}
elsif ($cmd eq 'update') {
}
else {
    print "${cmd} is unknown command.\n";
    # usage?
    exit 1;
}
